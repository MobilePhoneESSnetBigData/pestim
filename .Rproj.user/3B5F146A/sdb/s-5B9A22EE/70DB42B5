{
    "collab_server" : "",
    "contents" : "#' @title modeLambda\n#' @description\n#' @author David Salgado\n#' @export\n#'\nmodeLambda <- function(nMNO, nReg, fu, fv, flambda, relTol = 1e-2, nSim = 1e4, nStrata = c(1, 1e2), verbose = FALSE){\n\n  nCells <- length(nMNO)\n  if (length(nReg) != nCells) stop('nReg and nMNO must have the same length.')\n\n  mc <- match.call()\n  mc[[1L]] <- NULL\n\n  if (nCells == 1) {\n    if (verbose) cat('Searching maximum...')\n\n    x0 <- (nMNO + nReg) / 2\n    h <- x0 / 2\n\n    f0lr <- dlambda(c(x0, max(x0 - h, 0), x0 + h), nMNO, nReg, fu, fv, flambda, relTol, nSim, nStrata, verbose)$probLambda\n    diff0lr <- abs(f0lr[2:3] - f0lr[1])\n    stopCrit <- FALSE\n\n    while (!stopCrit){\n\n      index.max <- which.max(f0lr)\n\n      if (index.max == 1) {\n\n        h <- h / 2\n        f0lr <- c(f0lr[1], dlambda(c(max(x0 - h, 0), x0 + h), nMNO, nReg, fu, fv, flambda, relTol, nSim, nStrata, verbose)$probLambda)\n\n      } else if (index.max == 2) {\n\n        x0 <- max(x0 - h, 0)\n        f0lr <- c(f0lr[2], dlambda(max(x0 - h, 0), nMNO, nReg, fu, fv, flambda, relTol, nSim, nStrata, verbose)$probLambda, f0lr[1])\n\n      } else if (index.max == 3) {\n\n        x0 <- x0 + h\n        f0lr <- c(f0lr[3], f0lr[1], dlambda(x0 + h, nMNO, nReg, fu, fv, flambda, relTol, nSim, nStrata, verbose)$probLambda)\n\n      }\n      diff0lr <- abs(f0lr[2:3] - f0lr[1])\n\n      stopCrit <- any(diff0lr / f0lr[1] < relTol) | h < .Machine$double.eps\n\n    }\n\n    xMax <- c(x0, max(x0 - h, 0), x0 + h)[index.max]\n    if (verbose) cat(' ok.\\n')\n    return(xMax)\n\n  } else {\n\n    output <- sapply(seq(along = nMNO), function(i){\n\n      locnMNO <- nMNO[i]\n      locnReg <- nReg[i]\n      locfu.Pars <- lapply(fu[-1], '[', i)\n      locfu <- c(fu[[1L]], locfu.Pars)\n      locfv.Pars <- lapply(fv[-1], '[', i)\n      locfv <- c(fv[[1L]], locfv.Pars)\n      locflambda.Pars <- lapply(flambda[-1], '[', i)\n      locflambda <- c(flambda[[1L]], locflambda.Pars)\n      locMode <- modeLambda(locnMNO, locnReg, locfu, locfv, locflambda, relTol, nSim, nStrata, verbose)\n      return(locMode)\n    })\n    return(output)\n\n  }\n}\n",
    "created" : 1516949056415.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3912540513",
    "id" : "70DB42B5",
    "lastKnownWriteTime" : 1516949132,
    "last_content_update" : 1516949132641,
    "path" : "~/pestim/R/modeLambda.R",
    "project_path" : "R/modeLambda.R",
    "properties" : {
    },
    "relative_order" : 9,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}